# Jaxmin

Jaxmin es un lenguaje de programación inspirado en C.


## Palabras reservadas

Conjunto de palabras reservadas:

		bool born break char confederation elif else False float for func
		hollow if int next Null proc program puff read ref return step
		struct to True while write

Conjunto de símbolos usados por Jaxmin:

		[ ] { } ( ) . = + - * / % - < <= >= >
		== != += *= /= -= %= /\ \/ ~ -> # #> <#


## Identificadores
Los identificadores son una cadena de caracteres de cualquier longitud. El primero es una letra en mayúscula o minúscula y el resto pueden ser letras (mayúsculas o minúsculas), dígitos o "_". sirven para dar nombre a variables, subrutinas y estructuras



## Tipos de datos

Existen 6 tipos de datos primitivos en el lenguaje:

### hollow
Es el tipo de dato que representa vacio o falta de dato y se usa al declarar valores de retorno de funciones.

### bool
Representa valores booleanos (True o False).

### int
Representa números enteros con signo, utilizando 32 bits.

### float
Representa numeros reales utilizacon punto flotante de 32 bits. El separador entre la parte entera y la parte decimal es el "."

### char
Representa un caracter.

### string
Representa una cadena de caracteres que tendra como ultimo caracter '\\0'.

### pointer
Representa la dirección de memoria donde se encuantran guardadas constantes o variables.

### Estructuras anidadas

### struct
Estructura definida por el usuario que contiene una cantidad arbitraria de datos heterogéneos. El nombre de la estructura debe ser un identificador con la primera letra en mayúscula.

La comparacion entre estas estructuras es superficial (por nombre), así como la copia.

		struct Foo {
			int i
			char k
			...
		}

para acceder a los campos de la estructura se usa el caracter "." luego de alguna estructura válida.

		bar.campo

### confederation
Estructura definida por el usuario que contiene una cantidad arbitraria de datos heterogéneos que comparten el mismo espacio de memoria (el del tipo mas grade). El nombre de la estructura debe ser un identificador con la primera letra en mayúscula.

El uso de esta estructura queda por definirse

### arreglos
Pueden ser multidimensionales con indices numéricos comenzando en 0. para acceder al elemento i de un arreglo se usa:

		foo[i]

## Expresiones

Las expresiones pueden ser

* Literales como los valores True, False y Null

* Variables

* Expresiones aritméticas

* Expresiones booleanas

* Expresiones relacionales

### Expresiones aritméticas
Estan formadas por valores numéricos (int y float) y operadores convencionales de aritmética.

*    **+**  Operador para la suma.
*    **-**  Operador para la resta.
*    **\***  Operador para la multiplicacion.
*    **/**  Operador para la división.
*	  **//** Operador para la división entera.
*    **-** Negativo.

### Expresiones booleanas
Estan formadas por valores booleanos y operadores lógicos.

*    **\\/**  Disyunción lógica
*    **/\\** Conjunción lógica
*    **~** Negación lógica

En ambas expresiones se pueden usar parentesis para modificar la precedencia

### Expresiones relacionales
Estas expresiones comparan otras expresiones para devolver un valor booleano. Estas
expresiones pueden ser de dos formas: aritmética con aritmética o booleana con booleana.

Booleana con booleana tiene los siguientes operadores:

*    **==** Igualdad
*    **!=** Desigualdad

Aritmética con aritmética tiene los siguientes operadores:

*    **==** Igualdad
*    **!=** Desigualdad
*    **>**  Mayor que
*    **>=** Mayor o igual que
*    **<**  Menor que
*    **<=** Menor o igual que


### Precedencia
Los operadores presentan la siguiente precedencia, de mayor a menor:

*		**- (negativo), ~**
*		**\*, /, //, %**
*		**+, -**
*		**>, >=. <, <=**
*		**==, !=**
*		**/\\**
*		**\\/**


###Asociatividad
Todos los operadores aritméticos y los operadores booleanos (**/\\, \\/, ~, ==, != **)
son asociativos a la izquierda. Los otros operadores booleanos (**>, >=, <, <=**)
no poseen asociatividad.


##Entrada y salida
Para la entrada y salida se tienen las instrucciones **read** y **write**.

		read variable
		write expresión


##Instrucciones
###Declaración de variables
Las variables pueden declararse de cualquier tipo primitivo excepto hollow y string.

Una declaración puede ocurrir en cualquier parte del codigo. El alcance de la variable sera desde su declaración hasta el fin del bloque donde ocurre.

El formato para la declaración de variables es el siguiente:

		tipo variable
		tipo variable = expresion

Declarar apuntadores es de la siguiente manera:

		tipo * variable

Para variables de tipo arreglo se usa el siguiente formato:

		tipo variable[tamaño]
		tipo variable[dimension1][dimension2]

Las variables de tipo primitivo tendran valores por defecto si no son inicializadas:

*		int = 0
*		float = 0.0
*		bool = False
*		char = '\\0'


###Declaración de subrutinas
Jaxmin diferencia entre procedimientos y funciones.

###Procedimientos
Los procedimientos pueden recibir argumentos por valor o por referencia.
Para diferenciarlos se usa la palabra reservada **ref** seguida de ":".
Estos no retornan valor alguno.

		proc foo(int i, ref : float j, char c) {
			...
		}

###Funciones
Las funciones solo pueden recibir argumentos por valor. Estas deberan
retornar un valor acorde a su tipo. Toda función debe tener un return.

		func foo(int i, char c) -> int {
			...
			return i
		}



###Asignación
Las asignaciones tienen el siguiente formato:

		tipo variable = expresión
		variable = expresión

Ejecutar una asignación tiene el efecto de evaluar la expresión de la derecha y guardar el resultado en la variable de la izquierda. La variable tiene que estar declarada previamente o la asignación ser parte de la declaración.

Adicionalmente tenemos los operadores de asignación:

*		**+=**
*		**-=**
*		**\*=**
*		**/=**
*		**%=**

Ejemplo:

		var += cosa

Es equivalente a

		var = var + cosa


###Selección
Esta instrucción al momento de evaluar la condición tendra cortocircuito. Para ella se utilizara la palabra reservada **if** y tendra el siguiente formato:

		if condición {
			instrucción
			...
		}

En el caso poder evaluar otras condiciones o tener un bloque por defecto se tienen las palabras reservadas **elif** y **else** respectivamente con el siguiente formato:

		if condición {
			...
		} elif condición {
			...
		} else {
			...
		}


###Iteración indeterminada

		while condición {
			...
		}


###Iteración determinada
Para la iteración determinada tenemos dos formas:

		for int i to 5 {
			...
		}

		for i to -10 step -1 {
			...
		}

Se iterara desde el valor del limite inferior hasta (inclusive) el limite superior.
Los parametros del limite de la iteración podran ser variables, pero estas no
podran ser modificadas dentro de ella.

Observaciones:

*		step solo podra ser un número entero.
*		step sumara el número que reciba a la variable de iteración.
*		Si no se recibe step se tomara por defecto el valor 1.


###Invocación de subrutinas
Para procedimientos y funciones de tipo hollow:

		nombre(parametro,...)

Para funciones:

		var = nombre(parametro,...)


###Manejo de Memoria
Para el manejo de memoria se tienen las palabras reservadas **born**, solicita memoria, y **puff**, libera memoria.

		nuevo = born int
		puff nuevo


##Estructura de un programa
La estructura de un programa es de la siguiente forma:

		<Declaración de función>
		<Declaración de procedimiento>
		<Declaración de función>
		...

		program {
			...
		}

Ejemplo:

		func fib (int n) -> int {
			if n < 0 {
				write "lástima"
			} elif (n == 0) \/ ( n == 1) {
				return 1
			}
			return fib(n-1) + fib(n-2)
		}

		program {
			int f
			f = fib(10)
		}


##Funciones predefinidas
Para esta versión de Jaxmin se cuentan con las siguientes funciones predefinidas
en alcance global:

		func itof(int i) -> float 		# Convierte un int en float
		func ftoi(float f) -> int 		# Convierte un float en int


##Comentarios
En Jaxmin los comentarios tienen dos formas:

En línea:

		# Esto es un comentario

En bloque:

		#>
			Esto sigue siendo un comentario
		<#
